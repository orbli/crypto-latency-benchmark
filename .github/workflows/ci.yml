name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch: # Allow manual runs

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-lint:
    name: Build and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy (linter)
      run: cargo clippy --all-targets --all-features -- -W clippy::all

    - name: Build in release mode
      run: cargo build --release --verbose

  full-benchmark:
    name: Full Production Benchmark
    runs-on: ubuntu-latest
    needs: build-and-lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build in release mode
      run: cargo build --release

    - name: Create .env file from secrets
      run: |
        echo "Creating .env file with API credentials..."
        cat > .env << EOF
        # GitHub Actions environment variables
        BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}
        BINANCE_API_SECRET=${{ secrets.BINANCE_API_SECRET }}
        
        # Optional settings
        USE_TESTNET=false
        CONFIG_PATH=./config.yaml
        EOF
        echo "âœ… .env file created successfully"

    - name: Run Production Benchmark (JSON + FIX only)
      run: |
        echo "ðŸš€ Running production benchmark with JSON and FIX protocols..."
        echo "Note: SBE benchmark disabled due to 451 legal restrictions in GitHub Actions"
        echo "This will test real Binance market data streams"
        echo "Expected runtime: ~2 minutes (60 seconds per protocol + startup)"
        echo ""
        echo "API Key configured: $(head -c 10 .env | tail -c 4)...$(tail -c 10 .env | head -c 4)"
        echo ""
        echo "Running JSON WebSocket benchmark..."
        cargo run --release json
        echo ""
        echo "Running FIX Market Data benchmark..."
        cargo run --release fix
        echo ""
        # SBE benchmark commented out due to HTTP 451 errors in CI:
        # echo "Running SBE WebSocket benchmark..."
        # cargo run --release sbe
        echo "âœ… Available benchmarks completed successfully!"
        echo "Note: SBE streams return '451 Unavailable For Legal Reasons' in CI environment"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit

